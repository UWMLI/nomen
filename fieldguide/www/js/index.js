// Generated by CoffeeScript 1.7.1

/*
App-o-Mat jQuery Mobile Cordova starter template
https://github.com/app-o-mat/jqm-cordova-template-project
http://app-o-mat.com

MIT License
https://github.com/app-o-mat/jqm-cordova-template-project/LICENSE.md
 */

(function() {
  var App, appendTo;

  appendTo = function(element, muggexpr) {
    return element.append(CoffeeMugg.render(muggexpr, {
      format: false
    })).trigger('create');
  };

  App = (function() {
    function App() {}

    App.prototype.initialize = function() {
      return $(document).ready((function(_this) {
        return function() {
          return _this.onDeviceReady();
        };
      })(this));
    };

    App.prototype.onDeviceReady = function() {
      FastClick.attach(document.body);
      this.setBlur();
      $(document).scroll((function(_this) {
        return function() {
          return _this.setBlur();
        };
      })(this));
      $(document).bind('touchmove', (function(_this) {
        return function(e) {
          return _this.setBlur();
        };
      })(this));
      return this.loadSpecies((function(_this) {
        return function() {
          _this.makeRows();
          _this.showLikely();
          _this.fillLikely();
          _this.addSwipe();
          return console.log('Loaded!');
        };
      })(this));
    };

    App.prototype.addSwipe = function() {
      return $('#specimen-content').on('swipe', (function(_this) {
        return function(event) {
          var end, start;
          start = event.swipestart.coords[0];
          end = event.swipestop.coords[0];
          if (start < end) {
            return _this.swipeRight();
          } else {
            return _this.swipeLeft();
          }
        };
      })(this));
    };

    App.prototype.loadSpecies = function(callback) {
      return $.get('data/dataset.csv', (function(_this) {
        return function(str) {
          var csvRow, feature, spec, value, values, _i, _len, _ref;
          _this.species = (function() {
            var _i, _len, _ref, _results;
            _ref = $.parse(str).results.rows;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              csvRow = _ref[_i];
              _results.push(new Species(csvRow));
            }
            return _results;
          })();
          _this.speciesHash = {};
          _ref = _this.species;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            spec = _ref[_i];
            _this.speciesHash[spec.name] = spec;
          }
          _this.featureRows = (function() {
            var _ref1, _results;
            _ref1 = allFeatures(this.species);
            _results = [];
            for (feature in _ref1) {
              values = _ref1[feature];
              _results.push((function() {
                var _results1;
                _results1 = [];
                for (value in values) {
                  _results1.push({
                    display: value.split('_').join(' '),
                    image: "data/plantfeatures/" + feature + "/" + feature + "-" + value + ".png",
                    feature: feature,
                    value: value
                  });
                }
                return _results1;
              })());
            }
            return _results;
          }).call(_this);
          return callback();
        };
      })(this));
    };

    App.prototype.makeRows = function() {
      var feature, row, _i, _len, _ref;
      _ref = this.featureRows;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        feature = row[0].feature;
        appendTo($('#plants-content'), function() {
          return this.div('.feature-row', function() {
            this.div('.feature-name', feature.split('_').join(' '));
            return this.div('.feature-boxes', function() {
              var display, image, toggleFn, value, _j, _len1, _ref1, _results;
              _results = [];
              for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
                _ref1 = row[_j], display = _ref1.display, image = _ref1.image, value = _ref1.value;
                toggleFn = "app.toggleElement(this, '" + feature + "', '" + value + "');";
                _results.push(this.div('.feature-box', {
                  onclick: toggleFn
                }, function() {
                  this.img('.feature-img', {
                    src: image
                  });
                  return this.div('.feature-value', display);
                }));
              }
              return _results;
            });
          });
        });
      }
      return this.selected = {};
    };

    App.prototype.toggleElement = function(element, feature, value) {
      var _base;
      if ((_base = this.selected)[feature] == null) {
        _base[feature] = {};
      }
      if (this.selected[feature][value]) {
        delete this.selected[feature][value];
      } else {
        this.selected[feature][value] = true;
      }
      if (Object.keys(this.selected[feature]).length === 0) {
        delete this.selected[feature];
      }
      value = $(element).find('.feature-value');
      if (value.hasClass('selected')) {
        value.removeClass('selected');
      } else {
        value.addClass('selected');
      }
      this.showLikely();
      return this.fillLikely();
    };

    App.prototype.showLikely = function() {
      return $('#likely-button').html("" + (this.getLikely().length) + " Likely");
    };

    App.prototype.getLikely = function() {
      var cutoff, maxScore, spec, _i, _len, _ref, _results;
      maxScore = Object.keys(this.selected).length;
      cutoff = maxScore * 0.9;
      _ref = this.species;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        spec = _ref[_i];
        if (spec.computeScore(this.selected) >= cutoff) {
          _results.push(spec);
        }
      }
      return _results;
    };

    App.prototype.fillLikely = function() {
      var score, spec, species, _i, _len, _ref, _ref1, _results;
      $('#likely-content').html('');
      species = (function() {
        var _i, _len, _ref, _results;
        _ref = this.species;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          spec = _ref[_i];
          _results.push([spec, spec.computeScore(this.selected)]);
        }
        return _results;
      }).call(this);
      species.sort(function(s1, s2) {
        return s2[1] - s1[1];
      });
      _ref = species.slice(0, 10);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], spec = _ref1[0], score = _ref1[1];
        _results.push(appendTo($('#likely-content'), function() {
          var setFn;
          setFn = function(i) {
            return "if (!event.wasImage) app.setSpecimen('" + spec.name + "', " + i + ");";
          };
          return this.a({
            href: '#specimen',
            'data-transition': 'slide',
            onclick: setFn(0)
          }, function() {
            return this.div('.feature-row', function() {
              this.div('.feature-name', function() {
                return this.text("" + spec.name + " (" + score + ")");
              });
              return this.div('.feature-boxes', function() {
                var image, ix, _j, _len1, _ref2, _results1;
                if (spec.pictures.length === 0) {
                  return this.div('.feature-box', function() {
                    this.img('.feature-img', {
                      src: 'data/noimage.png'
                    });
                    return this.div('.feature-value', 'No Image');
                  });
                } else {
                  _ref2 = spec.pictures;
                  _results1 = [];
                  for (ix = _j = 0, _len1 = _ref2.length; _j < _len1; ix = ++_j) {
                    image = _ref2[ix];
                    _results1.push(this.div('.feature-box', {
                      onclick: "" + (setFn(ix)) + " event.wasImage = true;"
                    }, function() {
                      var part, place, result, scientific, __;
                      this.img('.feature-img', {
                        src: "data/plantphotos/" + image + ".jpg"
                      });
                      result = image.match(/^(\w+)-(\w+)-(\w+)$/);
                      if (result != null) {
                        __ = result[0], scientific = result[1], part = result[2], place = result[3];
                        return this.div('.feature-value', part.split('_').join(' '));
                      }
                    }));
                  }
                  return _results1;
                }
              });
            });
          });
        }));
      }
      return _results;
    };

    App.prototype.setSpecimen = function(name, ix) {
      var desc, id, spec;
      spec = this.speciesHash[name];
      this.imgs = (function() {
        var _i, _len, _ref, _results;
        if (spec.pictures.length === 0) {
          return ['data/noimage.png'];
        } else {
          _ref = spec.pictures;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            id = _ref[_i];
            _results.push("data/plantphotos/" + id + ".jpg");
          }
          return _results;
        }
      })();
      desc = spec.description;
      $('#specimen-name').html(name);
      this.imageIndex = ix;
      this.setImage();
      return $('.specimen-text').html(desc);
    };

    App.prototype.setImage = function() {
      var img;
      img = this.imgs[this.imageIndex];
      $('.specimen-img').css('background-image', "url(" + img + ")");
      return $('.specimen-img-fake').prop('src', img);
    };

    App.prototype.swipeLeft = function() {
      if (this.imageIndex < this.imgs.length - 1) {
        this.imageIndex++;
        return this.setImage();
      }
    };

    App.prototype.swipeRight = function() {
      if (this.imageIndex > 0) {
        this.imageIndex--;
        return this.setImage();
      }
    };

    App.prototype.setBlur = function() {
      var maxScroll, scroll, windowHeight;
      scroll = $(document).scrollTop();
      windowHeight = $(window).height();
      maxScroll = $(document).height() - windowHeight;
      if (maxScroll > 50) {
        return $('.blur').css('opacity', (scroll - 50) / (windowHeight * 0.5));
      } else {
        return $('.blur').css('opacity', 0);
      }
    };

    return App;

  })();

  window.app = new App;

}).call(this);
