// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var Library;

  Library = (function() {
    function Library(datadir) {
      this.datadir = datadir;
      this.dir = "" + this.datadir + "/library";
    }

    Library.prototype.makeDir = function(callback) {
      return resolveLocalFileSystemURL(this.datadir, (function(_this) {
        return function(dir) {
          return dir.getDirectory('library', {
            create: true
          }, function() {
            return callback();
          });
        };
      })(this));
    };

    Library.prototype.deleteDir = function(callback) {
      return resolveLocalFileSystemURL(this.dir, (function(_this) {
        return function(dir) {
          return dir.removeRecursively(callback);
        };
      })(this), callback);
    };

    Library.prototype.deleteSet = function(id, callback) {
      return resolveLocalFileSystemURL("" + this.dir + "/" + id, (function(_this) {
        return function(dir) {
          return dir.removeRecursively(callback);
        };
      })(this), callback);
    };

    Library.prototype.makeSet = function(id, callback) {
      return this.deleteSet(id, (function(_this) {
        return function() {
          return resolveLocalFileSystemURL(_this.dir, function(dir) {
            return dir.getDirectory(id, {
              create: true
            }, function(dirEntry) {
              return callback(dirEntry);
            });
          });
        };
      })(this));
    };

    Library.prototype.scanLibrary = function(callback) {
      var processDirs;
      this.datasets = {};
      processDirs = (function(_this) {
        return function(urls) {
          if (urls.length === 0) {
            return callback();
          } else {
            return _this.addLibrary(urls.pop(), function() {
              return processDirs(urls);
            });
          }
        };
      })(this);
      return $.getJSON("" + this.datadir + "/library.json", (function(_this) {
        return function(urls) {
          var fixedURLs, url;
          fixedURLs = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = urls.length; _i < _len; _i++) {
              url = urls[_i];
              if (url.match(/^https?:\/\//) != null) {
                _results.push(url);
              } else {
                _results.push("" + this.datadir + "/" + url);
              }
            }
            return _results;
          }).call(_this);
          return processDirs(fixedURLs);
        };
      })(this)).fail((function(_this) {
        return function() {
          return resolveLocalFileSystemURL(_this.dir, function(dirEntry) {
            var dirReader;
            dirReader = dirEntry.createReader();
            return getSubdirs(dirEntry.createReader(), function(dirs) {
              var dir;
              return processDirs((function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = dirs.length; _i < _len; _i++) {
                  dir = dirs[_i];
                  _results.push(dir.toURL());
                }
                return _results;
              })());
            });
          }, callback);
        };
      })(this));
    };

    Library.prototype.addLibrary = function(url, callback) {
      var ds;
      ds = new Dataset(url);
      return ds.loadInfo((function(_this) {
        return function() {
          _this.datasets[ds.id] = ds;
          return callback();
        };
      })(this));
    };

    return Library;

  })();

  window.Library = Library;

}).call(this);
