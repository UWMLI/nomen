// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var Dataset, datasetDisplay, getAllFiles, toArray;

  toArray = function(list) {
    return Array.prototype.slice.call(list || [], 0);
  };

  getAllFiles = function(dirReader, callback) {
    var files, getSome, readers;
    files = [];
    readers = [];
    getSome = function() {
      return dirReader.readEntries(function(results) {
        var file, _i, _len, _ref;
        if (results.length === 0) {
          if (readers.length === 0) {
            return callback(files);
          } else {
            dirReader = readers.pop();
            return getSome();
          }
        } else {
          _ref = toArray(results);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            file = _ref[_i];
            if (file.isFile) {
              files.push(file);
            } else if (file.isDirectory) {
              readers.push(file.createReader());
            }
          }
          return getSome();
        }
      });
    };
    return getSome();
  };

  Dataset = (function() {
    function Dataset(dir) {
      this.dir = dir;
    }

    Dataset.prototype.load = function(callback) {
      return this.loadInfo((function(_this) {
        return function() {
          return _this.loadFeatureImages(function() {
            return _this.loadSpeciesImages(function() {
              return _this.loadSpeciesData(function() {
                return callback();
              });
            });
          });
        };
      })(this));
    };

    Dataset.prototype.loadInfo = function(callback) {
      return $.getJSON("" + this.dir + "/info.json", (function(_this) {
        return function(json) {
          _this.title = json.title, _this.id = json.id, _this.version = json.version;
          return callback();
        };
      })(this));
    };

    Dataset.prototype.loadFeatureImages = function(callback) {
      var useImages;
      this.featureImages = {};
      useImages = (function(_this) {
        return function(images) {
          var image, _i, _len;
          for (_i = 0, _len = images.length; _i < _len; _i++) {
            image = images[_i];
            _this.addFeatureImage(image);
          }
          return callback();
        };
      })(this);
      return $.getJSON("" + this.dir + "/features.json", useImages).fail((function(_this) {
        return function() {
          return resolveLocalFileSystemURL("" + _this.dir + "/features/", function(dirEntry) {
            return getAllFiles(dirEntry.createReader(), useImages);
          });
        };
      })(this));
    };

    Dataset.prototype.loadSpeciesImages = function(callback) {
      var useImages;
      this.speciesImages = {};
      useImages = (function(_this) {
        return function(images) {
          var image, _i, _len;
          for (_i = 0, _len = images.length; _i < _len; _i++) {
            image = images[_i];
            _this.addSpeciesImage(image);
          }
          return callback();
        };
      })(this);
      return $.getJSON("" + this.dir + "/species.json", useImages).fail((function(_this) {
        return function() {
          return resolveLocalFileSystemURL("" + _this.dir + "/species/", function(dirEntry) {
            return getAllFiles(dirEntry.createReader(), useImages);
          });
        };
      })(this));
    };

    Dataset.prototype.addFeatureImage = function(fileEntry) {
      var ext, feature, result, value, whole, _base;
      result = fileEntry.fullPath.match(/features\/(\w+)\/(\w+)\.(\w+)$/);
      if (result != null) {
        whole = result[0], feature = result[1], value = result[2], ext = result[3];
        feature = canonicalValue(feature);
        value = canonicalValue(value);
        if ((_base = this.featureImages)[feature] == null) {
          _base[feature] = {};
        }
        this.featureImages[feature][value] = fileEntry;
        return;
      }
      return console.log("Couldn't parse feature image: " + fileEntry.fullPath);
    };

    Dataset.prototype.addSpeciesImage = function(fileEntry) {
      var ext, label, name, result, whole, _base, _base1;
      result = fileEntry.name.match(/^(\w+)-([\w-]+)\.(\w+)$/);
      if (result != null) {
        whole = result[0], name = result[1], label = result[2], ext = result[3];
        name = canonicalValue(name);
        label = canonicalValue(label);
        if ((_base = this.speciesImages)[name] == null) {
          _base[name] = [];
        }
        this.speciesImages[name].push([label, fileEntry]);
        return;
      }
      result = fileEntry.name.match(/^(\w+)\.(\w+)$/);
      if (result != null) {
        whole = result[0], name = result[1], ext = result[2];
        name = canonicalValue(name);
        if ((_base1 = this.speciesImages)[name] == null) {
          _base1[name] = [];
        }
        this.speciesImages[name].push(['', fileEntry]);
        return;
      }
      return console.log("Couldn't parse species image: " + fileEntry.name);
    };

    Dataset.prototype.loadSpeciesData = function(callback) {
      return $.get("" + this.dir + "/species.csv", (function(_this) {
        return function(str) {
          var csvRow, spec, _i, _len, _ref;
          _this.species = {};
          _ref = $.parse(str).results.rows;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            csvRow = _ref[_i];
            spec = new Species(csvRow);
            _this.species[spec.name] = spec;
          }
          _this.listFeatures();
          return callback();
        };
      })(this));
    };

    Dataset.prototype.listFeatures = function() {
      var feature, k, spec, value, values, _ref, _results;
      this.features = {};
      _ref = this.species;
      _results = [];
      for (k in _ref) {
        spec = _ref[k];
        _results.push((function() {
          var _base, _ref1, _results1;
          _ref1 = spec.features;
          _results1 = [];
          for (feature in _ref1) {
            values = _ref1[feature];
            if ((_base = this.features)[feature] == null) {
              _base[feature] = {};
            }
            _results1.push((function() {
              var _i, _len, _results2;
              _results2 = [];
              for (_i = 0, _len = values.length; _i < _len; _i++) {
                value = values[_i];
                _results2.push(this.features[feature][value] = true);
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Dataset.prototype.imagesForSpecies = function(spec) {
      var _ref;
      return (_ref = this.speciesImages[canonicalValue(spec.name)]) != null ? _ref : [];
    };

    Dataset.prototype.imageForFeature = function(feature, value) {
      var _ref;
      return ((_ref = this.featureImages[canonicalValue(feature)]) != null ? _ref : {})[canonicalValue(value)];
    };

    return Dataset;

  })();

  datasetDisplay = function(obj) {
    return "" + obj.title + " v" + obj.version;
  };

  window.Dataset = Dataset;

  window.datasetDisplay = datasetDisplay;

}).call(this);
