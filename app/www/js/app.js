// Generated by CoffeeScript 1.9.3

/*
App-o-Mat jQuery Mobile Cordova starter template
https://github.com/app-o-mat/jqm-cordova-template-project
http://app-o-mat.com

MIT License
https://github.com/app-o-mat/jqm-cordova-template-project/LICENSE.md
 */

(function() {
  'use strict';
  var App, appendTo, replaceHtml;

  appendTo = function(element, muggexpr) {
    element.append(CoffeeMugg.render(muggexpr, {
      format: false
    })).trigger('create');
  };

  replaceHtml = function(element, muggexpr) {
    element.html('');
    appendTo(element, muggexpr);
  };

  App = (function() {
    function App(readWriteDir, readOnlyDir, remoteURL) {
      this.library = readWriteDir != null ? new Library(readWriteDir) : null;
      this.libraryStatic = readOnlyDir != null ? new Archive(readOnlyDir) : null;
      this.remote = (readWriteDir != null) && (remoteURL != null) ? new Remote(readWriteDir, remoteURL) : null;
      if (readWriteDir == null) {
        $('#clear-button').addClass('ui-state-disabled');
      }
      if (!((readWriteDir != null) && (remoteURL != null))) {
        $('#download-button').addClass('ui-state-disabled');
      }
      this.isDownloading = false;
    }

    App.prototype.onDeviceReady = function() {
      FastClick.attach(document.body);
      this.resizeImage();
      $(window).resize((function(_this) {
        return function() {
          return _this.resizeImage();
        };
      })(this));
      this.refreshLibrary();
      $(document).scroll((function(_this) {
        return function() {
          return _this.checkScroll();
        };
      })(this));
      $.ajaxSetup({
        cache: false
      });
      if (this.library != null) {
        $('#delete-all-btn').show();
      }
    };

    App.prototype.syncRemote = function(callback) {
      if (callback == null) {
        callback = (function() {});
      }
      if (this.isDownloading) {
        callback();
        return;
      }
      $('#remote-content').html('<p>Connecting to server...</p>');
      setTimeout((function(_this) {
        return function() {
          _this.remote.downloadList(function() {
            var dataset, j, len, ref;
            _this.clearRemoteButtons();
            ref = _this.remote.datasets;
            for (j = 0, len = ref.length; j < len; j++) {
              dataset = ref[j];
              _this.addRemoteButton(dataset);
            }
            callback();
          }, function() {
            $('#remote-content').html("<p>Failed to connect.</p>\n<p><a onclick=\"app.syncRemote();\">Try again</a></p>");
          });
        };
      })(this), 250);
    };

    App.prototype.clearRemoteButtons = function() {
      $('#remote-content').text('');
      appendTo($('#remote-content'), function() {
        this.table('#remote-table .guide-table', '');
      });
    };

    App.prototype.addRemoteButton = function(dataset) {
      var local, newVersion, setFn;
      local = this.library.datasets[dataset.id];
      newVersion = (local != null) && local.version < dataset.version;
      setFn = "app.downloadZip($(this), '" + dataset.id + "');";
      appendTo($('#remote-table'), function() {
        this.tr('.guide-button', function() {
          this.td('.guide-icon-box', {
            onclick: setFn
          }, function() {
            var ref;
            this.img('.guide-icon', {
              src: (ref = dataset.icon) != null ? ref : 'img/noimage.png'
            });
          });
          this.td('.guide-text', {
            onclick: setFn
          }, function() {
            this.div('.guide-title', function() {
              this.text(dataset.title);
              if (newVersion) {
                this.text(' ');
                this.b("(new version)");
              }
            });
            this.div('.guide-desc', dataset.description);
          });
        });
        this.tr('.guide-spacer', '');
      });
    };

    App.prototype.downloadZip = function(button, id, callback) {
      var row, titleOrig, titleText;
      if (callback == null) {
        callback = (function() {});
      }
      row = button.closest('tr');
      titleText = button.parent().find('.guide-title');
      row.addClass('ui-state-disabled');
      titleOrig = this.remote.getDataset(id).title;
      titleText.text("Downloading: " + titleOrig);
      this.library.makeDir((function(_this) {
        return function() {
          _this.isDownloading = true;
          _this.remote.downloadDataset(id, _this.library, function() {
            titleText.text(titleOrig);
            row.removeClass('ui-state-disabled');
            _this.isDownloading = false;
            _this.refreshLibrary(callback);
          }, function() {
            setTimeout(function() {
              titleText.text("Failed: " + titleOrig);
              row.removeClass('ui-state-disabled');
              _this.isDownloading = false;
            }, 250);
          }, function(progress) {
            var percent, portion;
            portion = progress.loaded / progress.total;
            percent = Math.floor(portion * 100);
            titleText.text("Downloading: " + titleOrig + " (" + percent + "%)");
          });
        };
      })(this));
    };

    App.prototype.readyClear = function() {
      $('#confirm-delete-message').text('Are you sure you want to delete all guides?');
      this.deleteAction = (function(_this) {
        return function(callback) {
          _this.clearLibrary(callback);
        };
      })(this);
      $.mobile.changePage('#confirm-delete', {
        transition: 'pop'
      });
    };

    App.prototype.readyDelete = function(id) {
      var title;
      title = this.library.datasets[id].title;
      $('#confirm-delete-message').text("Are you sure you want to delete the \"" + title + "\" guide?");
      this.deleteAction = (function(_this) {
        return function(callback) {
          _this.deleteDataset(id, callback);
        };
      })(this);
      $.mobile.changePage('#confirm-delete', {
        transition: 'pop'
      });
    };

    App.prototype.proceedDelete = function(callback) {
      if (callback == null) {
        callback = (function() {});
      }
      this.deleteAction((function(_this) {
        return function() {
          $.mobile.changePage('#home', {
            transition: 'pop',
            reverse: true
          });
          callback();
        };
      })(this));
    };

    App.prototype.clearLibrary = function(callback) {
      if (callback == null) {
        callback = (function() {});
      }
      this.library.deleteDir((function(_this) {
        return function() {
          _this.refreshLibrary(callback);
        };
      })(this));
    };

    App.prototype.refreshLibrary = function(callback) {
      var scanStatic;
      if (callback == null) {
        callback = (function() {});
      }
      this.clearDataButtons();
      scanStatic = (function(_this) {
        return function() {
          if (_this.libraryStatic != null) {
            _this.libraryStatic.scanLibrary(function() {
              var dataset, id, ref;
              ref = _this.libraryStatic.datasets;
              for (id in ref) {
                dataset = ref[id];
                _this.addDataButton(dataset, false);
              }
              callback();
            });
          } else {
            callback();
          }
        };
      })(this);
      if (this.library != null) {
        this.library.scanLibrary((function(_this) {
          return function() {
            var dataset, id, ref;
            ref = _this.library.datasets;
            for (id in ref) {
              dataset = ref[id];
              _this.addDataButton(dataset, true);
            }
            scanStatic();
          };
        })(this));
      } else {
        scanStatic();
      }
    };

    App.prototype.deleteDataset = function(id, callback) {
      if (callback == null) {
        callback = (function() {});
      }
      this.library.deleteSet(id, (function(_this) {
        return function() {
          _this.refreshLibrary(callback);
        };
      })(this));
    };

    App.prototype.clearDataButtons = function() {
      $('#home-content').text('');
    };

    App.prototype.addDataButton = function(dataset, canDelete) {
      var button, deleteFn, setFn;
      setFn = "app.goToDataset('" + dataset.id + "');";
      deleteFn = "app.readyDelete('" + dataset.id + "');";
      appendTo($('#home-content'), function() {
        this.table('#home-table .guide-table', function() {
          this.tr('.guide-button', function() {
            this.td('.guide-icon-box', {
              onclick: setFn
            }, function() {
              var ref;
              this.img('.guide-icon', {
                src: (ref = dataset.icon) != null ? ref : 'img/noimage.png'
              });
            });
            this.td('.guide-text', {
              onclick: setFn
            }, function() {
              this.div('.guide-title', dataset.title);
              this.div('.guide-desc', dataset.description);
            });
            if (canDelete) {
              this.td('.guide-delete', {
                onclick: deleteFn
              }, 'Delete');
            }
          });
          this.tr('.guide-spacer', '');
        });
      });
      if (canDelete) {
        button = $('#home-table .guide-button').last();
        button.on('swipeleft', function(event) {
          $(event.target).closest('.guide-button').find('.guide-delete').show(100);
        });
        button.on('swiperight', function(event) {
          $(event.target).closest('.guide-button').find('.guide-delete').hide(100);
        });
      }
    };

    App.prototype.goToDataset = function(id, callback) {
      if (callback == null) {
        callback = (function() {});
      }
      this.setDataset(id, (function(_this) {
        return function() {
          $.mobile.changePage($('#dataset'));
          callback();
        };
      })(this));
    };

    App.prototype.setDataset = function(id, callback) {
      var ref, ref1, ref2;
      if (callback == null) {
        callback = (function() {});
      }
      this.dataset = (ref = (ref1 = this.library) != null ? ref1.datasets[id] : void 0) != null ? ref : (ref2 = this.libraryStatic) != null ? ref2.datasets[id] : void 0;
      this.dataset.load((function(_this) {
        return function() {
          var dataset, feature, naturalSort, value, values;
          naturalSort = function(a, b) {
            var __, anum, arest, bnum, brest, matchNum, ref3, ref4, ref5, ref6;
            matchNum = function(x) {
              return x.toString().match(/^([0-9]+)(.*)$/);
            };
            ref4 = (ref3 = matchNum(a)) != null ? ref3 : [null, Infinity, a], __ = ref4[0], anum = ref4[1], arest = ref4[2];
            ref6 = (ref5 = matchNum(b)) != null ? ref5 : [null, Infinity, b], __ = ref6[0], bnum = ref6[1], brest = ref6[2];
            if (anum === bnum) {
              return arest.localeCompare(brest);
            } else {
              return anum - bnum;
            }
          };
          _this.featureRows = (function() {
            var ref3, results;
            ref3 = this.dataset.features;
            results = [];
            for (feature in ref3) {
              values = ref3[feature];
              results.push((function() {
                var j, len, ref4, ref5, results1;
                ref4 = Object.keys(values).sort(naturalSort);
                results1 = [];
                for (j = 0, len = ref4.length; j < len; j++) {
                  value = ref4[j];
                  results1.push({
                    display: this.dataset.valueDisplayName(value),
                    image: (ref5 = this.dataset.imageForFeature(feature, value)) != null ? ref5 : 'img/noimage.png',
                    feature: feature,
                    value: value
                  });
                }
                return results1;
              }).call(this));
            }
            return results;
          }).call(_this);
          $('#dataset-header').text(_this.dataset.title);
          _this.makeFeatureRows();
          _this.showHowMany();
          _this.fillLikelyPage();
          dataset = _this.dataset;
          $('#about-guide-header').text(dataset.title);
          replaceHtml($('#about-guide-content'), function() {
            this.p("Author: " + dataset.author);
            this.p("Version: " + dataset.version);
            this.p(function() {
              this.raw(dataset.description);
            });
          });
          callback();
        };
      })(this));
    };

    App.prototype.makeFeatureRows = function() {
      var dataset, feature, j, len, ref, row;
      $('#dataset-entries').text('');
      ref = this.featureRows;
      for (j = 0, len = ref.length; j < len; j++) {
        row = ref[j];
        feature = row[0].feature;
        dataset = this.dataset;
        appendTo($('#dataset-entries'), function() {
          this.div('.feature-row', function() {
            this.div('.feature-name', dataset.featureDisplayName(feature));
            this.div('.feature-boxes', function() {
              var display, image, k, len1, ref1, toggleFn, value;
              for (k = 0, len1 = row.length; k < len1; k++) {
                ref1 = row[k], display = ref1.display, image = ref1.image, value = ref1.value;
                toggleFn = "app.toggleElement(this, '" + feature + "', '" + value + "');";
                this.div('.feature-box', {
                  onclick: toggleFn
                }, function() {
                  this.div('.feature-img-box', function() {
                    this.img('.feature-img', {
                      src: image
                    });
                  });
                  this.div('.feature-value', display);
                });
              }
            });
          });
        });
      }
      this.selected = {};
      $('.feature-value').removeClass('selected');
    };

    App.prototype.toggleElement = function(element, feature, value) {
      var base;
      if ((base = this.selected)[feature] == null) {
        base[feature] = {};
      }
      if (this.selected[feature][value]) {
        delete this.selected[feature][value];
        $(element).removeClass('selected');
      } else {
        this.selected[feature][value] = true;
        $(element).addClass('selected');
      }
      if (Object.keys(this.selected[feature]).length === 0) {
        delete this.selected[feature];
      }
      this.showHowMany();
      this.fillLikelyPage();
    };

    App.prototype.showHowMany = function() {
      $('#how-many-likely').text(this.getLikely().length);
    };

    App.prototype.getLikely = function() {
      var __, cutoff, maxScore, ref, results, spec;
      maxScore = Object.keys(this.selected).length;
      cutoff = maxScore;
      ref = this.dataset.species;
      results = [];
      for (__ in ref) {
        spec = ref[__];
        if (spec.computeScore(this.selected) >= cutoff) {
          results.push(spec);
        }
      }
      return results;
    };

    App.prototype.fillLikelyPage = function() {
      var __, maxScore, score, spec, species;
      $('#likely-col1').text('');
      $('#likely-col2').text('');
      $('#other-col1').text('');
      $('#other-col2').text('');
      species = (function() {
        var ref, results;
        ref = this.dataset.species;
        results = [];
        for (__ in ref) {
          spec = ref[__];
          results.push([spec, spec.computeScore(this.selected)]);
        }
        return results;
      }).call(this);
      maxScore = Object.keys(this.selected).length;
      if (maxScore > 0) {
        species = (function() {
          var j, len, ref, results;
          results = [];
          for (j = 0, len = species.length; j < len; j++) {
            ref = species[j], spec = ref[0], score = ref[1];
            if (score > 0) {
              results.push([spec, score]);
            }
          }
          return results;
        })();
        species.sort(function(arg, arg1) {
          var score1, score2, spec1, spec2;
          spec1 = arg[0], score1 = arg[1];
          spec2 = arg1[0], score2 = arg1[1];
          return score2 - score1;
        });
      }
      this.speciesPending = species;
      this.showSpecies();
      this.nextLikelyCol = 1;
      this.nextOtherCol = 1;
    };

    App.prototype.checkScroll = function() {
      if (document.URL.match(/\#likely$/) != null) {
        if ($(window).height() + $(document).scrollTop() >= $(document).height() - 50) {
          this.showSpecies();
          setTimeout((function(_this) {
            return function() {
              _this.checkScroll();
            };
          })(this), 0);
        }
      }
    };

    App.prototype.showSpecies = function() {
      var dataset, div, j, k, len, len1, maxScore, ref, ref1, s, score, spec, toShow;
      if (this.speciesPending.length === 0) {
        return;
      }
      toShow = this.speciesPending.slice(0, 10);
      this.speciesPending = this.speciesPending.slice(10);
      dataset = this.dataset;
      maxScore = Object.keys(this.selected).length;
      for (j = 0, len = toShow.length; j < len; j++) {
        ref = toShow[j], spec = ref[0], score = ref[1];
        div = score === maxScore ? (s = "#likely-col" + this.nextLikelyCol, this.nextLikelyCol = this.nextLikelyCol === 2 ? 1 : 2, s) : (s = "#other-col" + this.nextOtherCol, this.nextOtherCol = this.nextOtherCol === 2 ? 1 : 2, s);
        appendTo($(div), function() {
          var setFn;
          setFn = "app.setSpecies('" + spec.name + "'); return true;";
          this.a('.to-species', {
            href: '#specimen0',
            'data-transition': 'slide',
            onclick: setFn
          }, function() {
            this.div('.feature-box', function() {
              this.div('.feature-img-box', function() {
                var image, part, pics, ref1;
                pics = dataset.imagesForSpecies(spec);
                if (pics.length === 0) {
                  this.img('.feature-img', {
                    src: 'img/noimage.png'
                  });
                } else {
                  ref1 = pics[0], part = ref1[0], image = ref1[1];
                  this.img('.feature-img', {
                    src: image
                  });
                }
              });
              this.div('.feature-value', function() {
                this.text(spec.display_name + " (" + score + ")");
              });
            });
          });
        });
      }
      ref1 = ['#likely', '#other'];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        div = ref1[k];
        if ($(div + "-col1").html() === '') {
          $(div + "-species-section").hide();
        } else {
          $(div + "-species-section").show();
        }
      }
    };

    App.prototype.setSpecies = function(name) {
      var image, ix, j, len, part, pics, ref, spec;
      this.clearPages();
      spec = this.dataset.species[comparisonValue(name)];
      pics = this.dataset.imagesForSpecies(spec);
      if (pics.length === 0) {
        this.addPage(spec.display_name, 'img/noimage.png', spec.description, 0);
      } else {
        for (ix = j = 0, len = pics.length; j < len; ix = ++j) {
          ref = pics[ix], part = ref[0], image = ref[1];
          this.addPage(spec.display_name, image, spec.description, ix);
        }
      }
      this.resizeImage();
      this.addSwipes(pics.length);
    };

    App.prototype.clearPages = function() {
      var i, page;
      i = 0;
      while (true) {
        page = $("#specimen" + i);
        if (page.length === 0) {
          return;
        }
        page.remove();
        i++;
      }
    };

    App.prototype.addPage = function(name, img, desc, ix) {
      img = encodeURI(img);
      appendTo($('body'), function() {
        this.div("#specimen" + ix + " .specimen", {
          'data-role': 'page'
        }, function() {
          this.div('.dataset-navbar', function() {
            this.a('.dataset-nav-left', {
              href: '#likely',
              'data-transition': 'slide',
              'data-direction': 'reverse'
            }, function() {
              this.span('.dataset-nav-arrow', function() {
                this.img({
                  src: 'img/white-arrow.png'
                });
              });
              this.text(' Back');
            });
            this.div('.dataset-nav-center', '');
            this.div('.dataset-nav-right', '');
          });
          this.div('.ui-content .specimen-content', {
            'data-role': 'main'
          }, function() {
            this.div('.specimen-img-box', function() {
              this.div('.specimen-img', {
                style: "background-image: url(" + img + ");"
              }, '');
              this.div('.specimen-img .blur', {
                style: "background-image: url(" + img + ");"
              }, '');
              this.div('.specimen-img-gradient', '');
            });
            this.div('.specimen-text-box', function() {
              this.div('.specimen-text', function() {
                this.h1(name);
                this.raw(desc);
              });
            });
          });
        });
      });
    };

    App.prototype.addSwipes = function(imgs) {
      var fn, fn1, ix, j, k, ref, ref1;
      if (imgs >= 2) {
        fn = function(ix) {
          $("#specimen" + ix + " .specimen-img-box").on('swipeleft', function() {
            $.mobile.changePage("#specimen" + (ix + 1), {
              transition: "slide"
            });
          });
        };
        for (ix = j = 0, ref = imgs - 2; 0 <= ref ? j <= ref : j >= ref; ix = 0 <= ref ? ++j : --j) {
          fn(ix);
        }
        fn1 = function(ix) {
          $("#specimen" + ix + " .specimen-img-box").on('swiperight', function() {
            $.mobile.changePage("#specimen" + (ix - 1), {
              transition: "slide",
              reverse: true
            });
          });
        };
        for (ix = k = 1, ref1 = imgs - 1; 1 <= ref1 ? k <= ref1 : k >= ref1; ix = 1 <= ref1 ? ++k : --k) {
          fn1(ix);
        }
      }
    };

    App.prototype.resizeImage = function() {
      var h;
      h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
      $('.specimen-img-box').css('height', (h - 160) + "px");
    };

    return App;

  })();

  window.App = App;

}).call(this);
